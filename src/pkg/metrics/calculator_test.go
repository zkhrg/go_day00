package metrics_test

import (
	"math"
	"slices"
	"testing"

	"github.com/zkhrg/go_day00/pkg/metrics"
)

func TestAllSeparetely(t *testing.T) {
	tests := []struct {
		nums            []float64
		expected_mean   float64
		expected_median float64
		expected_mode   float64
		expected_sd     float64
	}{
		{[]float64{123, 3, 5, -123, 54, 23, 54}, 19.857142857143, 23, 54, 69.583307874043},
		{[]float64{-70868.41, -75789.09, 53853.35, -69911.64, 60299.94, 98363.51, 51171.00, 63060.00, -90233.84, 27276.83}, 4722.165, 39223.915, -90233.84, 68646.790915755},
		{[]float64{63352.67, -811.17, -20020.95, 90464.84, -23401.50, 67932.34, 64683.40, 34720.13, 3515.28, 30022.19}, 31045.723, 32371.16, -23401.5, 37981.741812186},
		{[]float64{-69710.73, -73692.77, 68061.62, -71955.01, 93006.24, 71091.13, -7853.01, -34380.75, 23062.30, 86859.54}, 8448.856, 7604.645, -73692.77, 65123.383420997},
		{[]float64{-40041.44, -37543.41, -21292.88, -42717.71, -83152.00, 96835.85, -91216.44, -27961.49, -28948.86, 40780.16}, -23525.822, -33246.135, -91216.44, 52584.360577766},
		{[]float64{53894.72, 57303.13, -33843.34, 41200.82, -58562.14, -46842.71, 24267.47, -35853.13, 2511.78, -54482.05, 86804.32, -35261.57, -37508.30, -96616.55, -44295.19, -79432.44, -61780.67, 84740.94, -65410.01, 67493.12, -93645.60, 8634.38, -74342.37, -6422.19, -49440.02, 79326.67, 93167.94, -97059.48, 92455.14, 90622.67, -91382.55, 30926.15, 15296.99, 61357.26, -79315.21, 22492.93, 58541.52, 62890.95, 83315.32, 93890.44, -76733.43, 76433.75, 37045.90, 87938.97, 54067.46, 83998.70, 69558.77, -97830.14, -25730.38, -93034.56, -804.52, 41822.50, -48692.50, 81434.08, -33023.42, -91376.16, -1670.97, -32179.70, 71005.12, 90538.62, 78162.09, -49698.80, 9626.85, -27453.41, 26868.87, -55448.43, 55344.44, -79757.69, 40607.25, -47084.34, 6643.62, -30330.10, 697.67, -22335.27, -55452.03, 19507.78, 86593.19, -35669.03, 55109.80, 92729.66, -51684.01, -97451.32, 55235.79, 65711.41, -32338.56, 88756.35, 79402.74, 76491.00, 65709.81, -29461.85, 25840.89, 86259.60, 96023.15, 35440.40, 53383.62, -27441.45, 56026.15, -46575.49, -88527.74, 98289.72, -75039.80, 73358.59, -91793.48, 45644.71, 96764.10, 68222.44, 89548.72, 51680.81, 87699.89, 86035.78, -46411.53}, 11043.871981982, 22492.93, -97830.14, 63668.822719698},
		{[]float64{31478.00, -86636.09, -82453.01, -41553.75, 72079.17, -13520.17, 46669.32, -5749.90, -95342.09, 99230.32, 19930.50, 67533.19, -20235.45, 10688.31, 25403.51, -81536.69, -71889.76, 7370.93, 11823.73, -6020.95, -49236.86, -21049.16, -86599.16, 79024.60, -29676.64, 37402.62, 55994.50, 83303.58, 18308.75, 88876.05, 74251.02, 44802.06, 44949.00, -25593.66, 97255.79, 61989.80, -55213.14, -44196.99, -77500.48, -82182.11, -20480.86, 68518.20, 24436.54, 12915.76, -61071.02, -41321.10, 29026.94, 80950.32, 68085.86, 59234.91, 32262.31, -74680.94, 82588.64, -6368.94, -96123.45, 47155.93, 42167.95, 84802.25, -3881.38, 32728.35, -30793.89, -54930.35, -86953.62, 8206.27, 94073.92, 43129.53, -22323.63, 17192.15, -58131.07, 80743.16, 18017.51, 98164.81, -44841.07, -71639.66, -18290.74, -91759.68, 68285.92, 6637.69, -31603.00, -46398.59, 7541.69, -28772.75, 73792.44, 89252.39, 73401.98, 71500.41, -28676.38, -54203.24, 17420.69, -46644.79, 70827.63, -60966.15, -39563.97, -59423.21, -30797.34, -28898.79, -23994.43, 98951.68, 59548.96, -62266.45, -6715.08, 9382.23, 59553.16, 38748.96, 11857.49, 49029.20, -7494.31, 12362.46, -38735.82, -74105.11, 79639.51}, 5148.3214414414, 8206.27, -96123.45, 56274.382589066},
		{[]float64{-28095.77, -80894.91, -18079.34, 16475.98, -14382.70, -89958.18, -48525.41, -39757.90, -6666.34, 58707.27, -21494.36, -41527.55, -46664.37, 76396.66, 8667.91, -56203.56, 69389.49, 98281.17, 26132.59, -92712.05, 86015.90, -15493.56, 2015.83, 78470.68, -88865.22, -98283.30, 25593.55, -75615.95, 74937.24, -63929.16, -61694.64, -60778.83, -13907.80, -68723.95, 32601.63, 48601.47, 33328.54, 5904.37, -15872.25, 84206.20, -80950.61, 41383.33, -17744.87, 80295.92, -39894.82, 134.74, 5917.49, 4078.29, 73338.18, 40641.21, -67980.01, -62070.03, 72414.86, -44347.41, 1249.21, 16047.44, 57114.02, 63775.67, -98119.48, 39509.21, 65495.08, -33025.20, 94837.31, -25990.00, -35119.48, -2143.77, -1484.88, 56926.30, -86193.51, 28841.49, 24282.96, -91419.97, -90458.03, -35394.43, -26902.24, -9474.40, 85903.27, -4097.74, -76964.25, 69127.20, -32593.13, 25326.98, 73066.05, -36559.80, 9157.27, 21021.69, -52010.23, -13716.12, -90819.12, 43701.61, 82344.24, -67168.61, 39605.48, -96852.60, 98755.08, 83677.40, -98231.35, 95354.79, -31033.96, -26302.00, -81558.25, -62819.73, -19431.15, 63215.50, -57249.50, -5098.37, 81790.28, -80380.34, 69731.30, 70897.41, -24007.37}, -3144.5866666667, -6666.34, -98283.3, 58355.691922717},
		{[]float64{-28763, 13398, -8497, -73376, -46701, 47485, 62881, 45167, -2867, -46007, 51522, 42581, -77119, 35829, -27273, -36879, -76569, 74155, -36829, -1109, -77220, 5317, -85270, 10439, -26367, -92450, 75877, -74391, 56588, 70348, 10618, -80306, 96457, -82914, -55688, -47509, 54205, 43030, -15535, -21487, 61022, 29905, 50572, -75456, 8210, 894, 22148, 71427, -66333, 26229, 35196, -58378, 48554, -5322, -72874, -64653, -13192, 6585, -53198, -95776, 84273, -2184, 22679, -20499, -1595, -10415, 29142, 325, 5584, 55172, -90764, -31942, -44328, 10581, 53035, 88718, -87638, 32439, 12043, -8575, 21782, -81331, 58248, 7718, -10798, -54692, -272, 88832, -69577, 1245, -86544, -9802, -47034, -40673, 63924, 64103, -41775, -16792, 69967, -15408, -78030, 79081, 57188, -47268, 64312, -93132, 824, 68743, 1192, 52510, 28654}, -3048.8558558559, -272, -95776, 52651.955862792},
		{[]float64{40, -97, 60, 71, -67, 67, 97, 1, 85, 2, -97, -36, 78, -75, -35, -65, 44, -98, 3, 54, -28, 18, 31, 30, 93, 22, -6, -9, -2, -48, 17, 71, -56, -33, -21, -12, 40, 67, 84, 44, 72, -47, 74, -67, 41, -36, 16, 92, 15, -16, 52, -41, 90, -90, -69, 84, 45, -31, -36, 51, 15, 86, 79, -10, 85, 27, 34, 16, -83, -21, 56, -86, -73, -41, 70, -2, -78, -39, -13, -8, 15, -48, 37, -50, -99, -64, -8, -35, 31, 98, -11, 34, 25, 78, 4, 34, -80, 65, 36, -44, 43, -77, 54, -21, 78, -39, 20, 97, -48, 86, -26, 30, 74, -40, 7, -44, 38, 67, -63, -63, -90, 95, 21, 99, -39, 11, 84, -83, 42, 55, 35, -59, -75, -58, -33, 80, -72, -71, 2, -19, -93, 47, 28, -96, -65, 62, 6, -44, 88, -36, -91, 97, -90, -29, -24, -12, -84, 1, 34, -72, 75, -75, 52, 54, 9, -85, 88, 34, -82, 74, -10, -27, 70, -34, -68, -70, -71, -35, -25, 51, -45, -10, 25, -84, 53, -4, -61, 2, 9, 16, -20, 51, 66, 83, -64, -59, 17, 85, -52, -17}, 1.03, 1.5, 34, 57.237217787031},
		{[]float64{-71, -64, -57, -61, 1, 65, -36, -1, -11, -48, -81, -54, -67, -82, 29, -90, -90, 33, 84, -6, 34, -21, -59, -35, 1, -21, -55, 80, 32, -81, -13, -30, -40, 69, 29, -85, -98, -87, 40, -97, 82, 65, -72, 46, -22, -51, 4, -96, 19, 48, -45, -86, 1, -38, -53, -6, -92, -49, 45, -18, 88, -15, -38, -31, 0, -87, -55, 95, 21, -95, -58, -6, 58, 62, -96, 86, -28, -99, 30, 57, 46, -95, -27, -53, -12, 94, 97, -27, -62, -88, 25, 5, -99, -31, -78, -25, -9, 52, 28, 18, -84, -34, -45, -86, 85, -53, 88, 5, -94, 83, 56, 97, -99, 28, -65, -69, -93, 86, 24, 96, 42, 19, -88, -28, 20, 92, -79, -31, 51, -36, 18, -17, -36, -70, 82, -4, -99, 29, 97, 64, 28, -19, 86, 82, -77, 20, 13, -99, -30, 93, -84, 33, -15, -83, 83, -38, 12, 86, 97, -44, -1, -22, 44, 56, 23, 15, 32, -78, -58, -7, -7, 24, -59, -35, -61, -9, -63, 33, -65, -42, 33, 38, 55, -20, -95, 3, 4, 25, -78, 16, -55, -76, -92, -80, 83, -60, 1, 1, 5, 24, -6, 84, 8, -63, 18, -55, 41, -30, -56, -21, -69, 67, 1, -7, 65, 91, 24, 25, -85, 84, 4, -14, -3, -65, -17, -88, 52, 61, -65, -79, 16, -32, -32, -18, -62, 76, -91, -30, -96, -41, -72, 68, 57, -84, -20, 5, 51, -6, 29, -54, -26, 69, -33, 2, -98, 7, 5, -33, 65, -33, 2, -26, 2, -48, -47, -76, 33, 21, 76, 21, 37, -87, -12, 96, 63, -33, 17, 42, 40, 75, 98, 30, -3, 37, 32, 99, -74, -75, -96, 18, 48, -89, -42, 17, -71, 88, 31, -6, 17, -55, 24, 95, 58, 93, -3, -83, 98, 59, -47, 10, 12, 91, -83, 87, 37, -25, -25, 63, -71, -52, -69, -56, 35, 59, 59, -52, 99, -22, -40, 64, -97, -2, -99, 41, -81, 61, 9, 61, 69, 2, 10, -78, 30, -53, -69, 2, -82, -2, -38, 35, 36, -49, 96, 65, -49, -27, 54, -10, 39, -55, 64, -78, 57, 99, -18, 4, 12, 33, -73, -38, -53, 54, -57, 53, -93, -18, 77, -90, 47, 50, 27, 26, 97, 33, -66, -1, -65, -32, 1, -32, 67, 45, 79, -17, -85, 12, 91, -3, 79, -30}, -4.9575, -3.5, 1, 57.478219298705},
	}

	for i := 0; i < len(tests); i++ {
		slices.Sort(tests[i].nums)
		res_mean, _ := metrics.FindMean(tests[i].nums)
		res_median, _ := metrics.FindMedian(tests[i].nums)
		res_mode, _ := metrics.FindMode(tests[i].nums)
		res_sd, _ := metrics.FindStandartDeviation(tests[i].nums)
		if !eqFloat(res_mean, tests[i].expected_mean) {
			t.Errorf("Test_Mean: %f != %f", res_mean, tests[i].expected_mean)
		}
		if !eqFloat(res_median, tests[i].expected_median) {
			t.Errorf("Test_Median: %f != %f", res_median, tests[i].expected_median)
		}
		if !eqFloat(res_mode, tests[i].expected_mode) {
			t.Errorf("Test_Mode: %f != %f", res_mode, tests[i].expected_mode)
		}
		if !eqFloat(res_sd, tests[i].expected_sd) {
			t.Errorf("Test_SD: %f != %f", res_sd, tests[i].expected_sd)
		}
	}
}

func TestAllSeparetelyError(t *testing.T) {
	var err error
	tests := []struct {
		nums []float64
	}{
		{make([]float64, 0)},
	}
	if _, err = metrics.FindMean(tests[0].nums); err == nil {
		t.Error("Test_Mean_Error")
	}
	if _, err = metrics.FindMedian(tests[0].nums); err == nil {
		t.Error("Test_Median_Error")
	}
	if _, err = metrics.FindMode(tests[0].nums); err == nil {
		t.Error("Test_Mode_Error")
	}
	if _, err = metrics.FindStandartDeviation(tests[0].nums); err == nil {
		t.Error("Test_StandartDeviation_Error")
	}
}

func eqFloat(a, b float64) bool {
	return math.Abs(a-b) < metrics.Eps
}
